import logging
# –ü—Ä–∏ –¥–µ–ø–ª–æ–µ —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ç—å
# logging.getLogger('aiogram').propagate = False # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ aiogram –¥–æ –µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
# logging.basicConfig(level=logging.INFO, filename='log/app.log', filemode='a', format='%(levelname)s - %(asctime)s - %(name)s - %(message)s',) # –ü—Ä–∏ –¥–µ–ø–ª–æ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
from worker_db import get_user_by_id, adding_user
from keys import telegram
import sys
import os
import asyncio
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F, Router, html
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from aiogram.filters import CommandStart, Command, Filter
from aiogram.types import (Message, BotCommand, LabeledPrice, ContentType,
                            InputFile, Document, PhotoSize, ReplyKeyboardRemove, 
                            InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
# from WalletPay import AsyncWalletPayAPI
# from WalletPay import WalletPayAPI, WebhookManager
# from WalletPay.types import Event
from datetime import datetime, timezone, timedelta
import uuid
from aiogram.utils.chat_action import ChatActionMiddleware




dp = Dispatcher() # All handlers should be attached to the Router (or Dispatcher)
#bot = Bot(telegram) #, default=types.DefaultBotProperties(parse_mode="Markdown")) # Initialize Bot instance with a default parse mode which will be passed to all API calls
bot = Bot(token=telegram, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# router = Router()
# router.message.middleware(ChatActionMiddleware())


# Get User_ID
def user_id(action) -> int:
    return action.from_user.id

# Show Typing
async def typing(action) -> None:
    await bot.send_chat_action(action.chat.id, action='typing')
    return




# PUSH /START
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    await typing(message)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –≤–∞—à–∏ —Ä–∞—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ä–∞–∑–ª–æ–∂–∏—Ç—å –≤—Å–µ –≤ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ê–Ω–∞–ª–∏–∑ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ü–µ–Ω–∏—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.")
        # Preparing user data
    id = user_id(message)
    name = message.from_user.username
    full_name = message.from_user.full_name
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
        # Save user data
    get_user = await get_user_by_id(id)
    if get_user is None:
        push_data_user = {
            "id": id,
            "name": name,
            "full_name": full_name,
            "first_name": first_name,
            "last_name": last_name
        }
        await adding_user(push_data_user)
    else:
        print()
        logging.info(f"The user id:{id} is already in the database.")


    # MENU
    bot_commands = [
        BotCommand(command="/add", description="üìà –ü—Ä–∏—Ö–æ–¥"),
        BotCommand(command="/dell", description="üìâ –†–∞—Å—Ö–æ–¥"),
        BotCommand(command="/bal", description="üíµ –ë–∞–ª–∞–Ω—Å"), 
        BotCommand(command="/stat", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="/set", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ]
    await bot.set_my_commands(bot_commands)
    return


# –°–¥–µ–ª–∞—Ç—å —á—Ç–æ –±—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ —É–∂–µ –≤—ã–¥–∞–≤–∞–ª–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å—É–º–º—É 

# SUB-MENU

class Form(StatesGroup):
    # Add
    add_cash = State() 
    add_cards = State()
    add_crypto = State()
    # Dell
    dell_cash = State()
    dell_cards = State()
    dell_crypto = State()


######## ADD MONEY ########
@dp.message(Command("add"))
async def menu_add(message: types.Message):
    #id = user_id(message)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å", callback_data="add_cash")],
            [InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", callback_data="add_cards")],
            [InlineKeyboardButton(text="üí∏ –ö—Ä–∏–ø—Ç–∞", callback_data="add_crypto")],
        ]
    )
    await message.answer("üìà –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –¥–µ–Ω—å–≥–∏", reply_markup=keyboard)

# ADD MONEY --- cash
@dp.callback_query(lambda c: c.data == 'add_cash')
async def process_add_cash(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.add_cash)

@dp.message(Form.add_cash, F.content_type.in_({'text'}))
async def invoice_add_cash(message: Message, state: FSMContext):
    id = user_id(message)
    # user_uuid = uuid.uuid4()
    print(message.text)

    push_data_user = {
        "id": id,
        "name": name,
        "full_name": full_name,
        "first_name": first_name,
        "last_name": last_name
    }


    await state.clear()

# ADD MONEY --- card
@dp.callback_query(lambda c: c.data == 'add_cards')
async def process_add_cards(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.add_cards)

@dp.message(Form.add_cards, F.content_type.in_({'text'}))
async def invoice_add_cards(message: Message, state: FSMContext):
    print(message.text)
    await state.clear()

# ADD MONEY --- add_crypto
@dp.callback_query(lambda c: c.data == 'add_crypto')
async def process_add_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –≤ USDT:") # {USDT}
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.add_cards)

@dp.message(Form.add_crypto, F.content_type.in_({'text'}))
async def invoice_add_crypto(message: Message, state: FSMContext):
    print(message.text)
    await state.clear()


######## DELL MONEY ########
@dp.message(Command("dell"))
async def menu_dell(message: types.Message):
    #id = user_id(message)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å", callback_data="dell_cash")],
            [InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", callback_data="dell_cards")],
            [InlineKeyboardButton(text="üí∏ –ö—Ä–∏–ø—Ç–∞", callback_data="dell_crypto")],
        ]
    )
    await message.answer("üìâ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–∫—É–¥–∞ —É–±—ã–ª–æ", reply_markup=keyboard)

# DELL MONEY --- cash
@dp.callback_query(lambda c: c.data == 'dell_cash')
async def process_dell_cash(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω—É—é —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.dell_cash)

@dp.message(Form.dell_cash, F.content_type.in_({'text'}))
async def invoice_dell_cash(message: Message, state: FSMContext):
    print(message.text)
    await state.clear()

# DELL MONEY --- cards
@dp.callback_query(lambda c: c.data == 'dell_cards')
async def process_dell_cards(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω—É—é —Å—É–º–º—É —Å –∫–∞—Ä—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.dell_cards)

@dp.message(Form.dell_cards, F.content_type.in_({'text'}))
async def invoice_dell_cards(message: Message, state: FSMContext):
    print(message.text)
    await state.clear()

# DELL MONEY --- crypto
@dp.callback_query(lambda c: c.data == 'dell_crypto')
async def process_dell_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω—É—é —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.dell_crypto)

@dp.message(Form.dell_crypto, F.content_type.in_({'text'}))
async def invoice_dell_crypto(message: Message, state: FSMContext):
    print(message.text)
    await state.clear()




######## BALANS ########
@dp.message(Command("bal"))
async def menu_bal(message: types.Message):
    #id = user_id(message)
    await message.answer("–ë–∞–ª–∞–Ω—Å")
    # await bot.answer_callback_query(message.id)
    # await message.answer("üìà –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –¥–µ–Ω—å–≥–∏", reply_markup=keyboard)



######## Statistic ########
@dp.message(Command("stat"))
async def menu_stat(message: types.Message):
    #id = user_id(message)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data="stat_month")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥", callback_data="stat_year")],
            # [InlineKeyboardButton(text="üìä ", callback_data="add_crypto")],
        ]
    )
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)

# STAT --- month
@dp.callback_query(lambda c: c.data == 'stat_month')
async def process_stat_month(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
    await bot.answer_callback_query(callback_query.id)

# STAT --- year
@dp.callback_query(lambda c: c.data == 'stat_year')
async def process_stat_year(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥")
    await bot.answer_callback_query(callback_query.id)



######## SETINGS ########
@dp.message(Command("set"))
async def menu_stat(message: types.Message):
    #id = user_id(message)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–∞–ª—é—Ç–∞", callback_data="currency")],
            [InlineKeyboardButton(text="–Ø–∑—ã–∫ –±–æ—Ç–∞", callback_data="lang")],
            # [InlineKeyboardButton(text="Backup", callback_data="backup")],
        ]
    )
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)

# SET --- currency
@dp.callback_query(lambda c: c.data == 'currency')
async def process_currency(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "currency")
    await bot.answer_callback_query(callback_query.id)

# SET --- lang
@dp.callback_query(lambda c: c.data == 'lang')
async def process_lang(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "lang")
    await bot.answer_callback_query(callback_query.id)



#                                                                           #
############################# SUB-MENU ######################################








@dp.message()
async def my_handler(message: Message):
    await typing(message)
    await asyncio.sleep(2)
    result = message.text
    print(result)
    await message.answer(result)



# @router.message()
# async def echo_handler(message: Message) -> None:
#     try:
#         # Send a copy of the received message
#         await message.send_copy(chat_id=message.chat.id)
#     except TypeError:
#         # But not all the types is supported to be copied so need to handle it
#         await message.answer("Nice try!")







if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout) # –ü—Ä–∏ –¥–µ–ø–ª–æ–µ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ç—å
    asyncio.run(dp.start_polling(bot, skip_updates=False)) # skip_updates=False –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram, –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
































# async def main() -> None:
#     # Initialize Bot instance with default bot properties which will be passed to all API calls
#     bot = Bot(token=telegram, default=DefaultBotProperties(parse_mode=ParseMode.HTML)) # Markdown  HTML
#     # And the run events dispatching
#     await dp.start_polling(bot)


# if __name__ == "__main__":
#     logging.basicConfig(level=logging.INFO, stream=sys.stdout)
#     asyncio.run(main())