import logging
# –ü—Ä–∏ –¥–µ–ø–ª–æ–µ —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ç—å
logging.getLogger('aiogram').propagate = False # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ aiogram –¥–æ –µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
logging.basicConfig(level=logging.INFO, filename='log/app.log', filemode='a', format='%(levelname)s - %(asctime)s - %(name)s - %(message)s',) # –ü—Ä–∏ –¥–µ–ø–ª–æ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
from worker_db import get_user_by_id, adding_user, adding_session, update_user, get_all_users_admin, get_session_by_month, get_session_stat_year
from functions import is_int_or_float, day_utcnow, re_day, re_month, sum_cat, re_year, unformat_date
from exchange import get_exchange
from category import get_category
from backupdb import backup_db
from restore_db import restore_db
from graph import build_graph, build_graph_hor
from keys import telegram_token, is_admin
import sys
import os
import csv
import asyncio
from io import StringIO, BytesIO
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F, Router, html
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from aiogram.filters import CommandStart, Command, Filter
from aiogram.types import (Message, BotCommand, LabeledPrice, ContentType,
                            InputFile, Document, PhotoSize, ReplyKeyboardRemove, 
                            InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
# from WalletPay import AsyncWalletPayAPI
# from WalletPay import WalletPayAPI, WebhookManager
# from WalletPay.types import Event
# import uuid
from aiogram.utils.chat_action import ChatActionMiddleware
from aiogram.utils.markdown import hbold


dp = Dispatcher() # All handlers should be attached to the Router (or Dispatcher)
#bot = Bot(telegram) #, default=types.DefaultBotProperties(parse_mode="Markdown")) # Initialize Bot instance with a default parse mode which will be passed to all API calls
bot = Bot(telegram_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# router = Router()
# router.message.middleware(ChatActionMiddleware())
                                                                                                

# Get User_ID
def user_id(action) -> int:
    return action.from_user.id

# Show Typing
async def typing(action) -> None:
    await bot.send_chat_action(action.chat.id, action='typing')
    return



# PUSH /START
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    await typing(message)

    await message.answer(f"RU\n–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n\n\
    üëõ –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ü–æ–∑–≤–æ–ª—è–µ—Ç\
    –¥–æ—Ç–æ—à–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —É–¥–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç.\n\
    –î–ª—è –∫–∞–∫–æ–π —Ç–æ —á–∞—Å—Ç–∏ –ª—é–¥–µ–π - —ç—Ç–æ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –º–µ–Ω—è.\n\n\
    –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞–±—Ä–∞–≤ —Ç–µ–∫—Å—Ç–æ–º:\n\
    - –ù–∞–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π '–±–∞–ª–∞–Ω—Å' –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞,\n\
    - –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –¥–æ–±–∞–≤–∏—Ç—å, —É–±—Ä–∞—Ç—å, –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≥—Ä–∞—Ñ–∏–∫–∏ –∏–ª–∏ —Ñ—Ä–∞–∑—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —á–∞—Å—Ç–∏ —ç—Ç–∏—Ö —Å–ª–æ–≤.")

# üóë –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤ –±–∞–∑–µ, –Ω–∞–∂–∞—Ç–∏–µ–º –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ - –ø–æ–∑–∂–µ.               
# EN\nHi, {html.bold(message.from_user.full_name)}!\n\n\
#     üëõ This is a bot that helps to keep statistics on income and expenses from various sources. Allows\
#     meticulously analyze the categories of expenses and income, providing a convenient report.\n\
#     For some part of people, it is very useful, for example, for me.\n\n\
#     üóë If desired, you can delete all transaction data in the database by pressing one button. More details later.")
        # Preparing user data
    id = user_id(message)
    name = message.from_user.username
    full_name = message.from_user.full_name
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    date = await day_utcnow()
        # Save user data
    get_user = await get_user_by_id(id)
    if get_user is None:
        push_data_user = {
            "id": id,
            "name": name,
            "full_name": full_name,
            "first_name": first_name,
            "last_name": last_name,
            "date": date
        }
        await adding_user(push_data_user)
    else:
        print()
        logging.info(f"The user id:{id} is already in the database.")


    # MENU
    bot_commands = [
        BotCommand(command="/add", description="üìà –ü—Ä–∏—Ö–æ–¥"),
        BotCommand(command="/del", description="üìâ –†–∞—Å—Ö–æ–¥"),
        BotCommand(command="/mov", description="üí∏ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"), 
        BotCommand(command="/stat", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        # BotCommand(command="/set", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ]
    await bot.set_my_commands(bot_commands)
    return










# SUB-MENU

class Form(StatesGroup):
        # Add
    add_cash = State() 
    add_cash_text = State() 
    add_cards = State()
    add_cards_text = State()
    add_crypto = State()
    add_crypto_text = State()
        # Dell
    del_cash = State()
    del_cash_text = State()
    del_cards = State()
    del_cards_text = State()
    del_crypto = State()
    del_crypto_text = State()
        # Move 
    mov_cash = State()
    mov_cash_choice = State()
    mov_card = State()
    mov_card_choice = State()
    mov_crypto = State()
    mov_crypto_choice = State()





######## ADD MONEY ########
@dp.message(Command("add"))
async def menu_add(message: types.Message):
        # Data preparation
    id = user_id(message)
    n = await get_user_by_id(id)
    if n:
        cash = n.cash
        crypto = n.crypto
        money_currency = n.money_currency
        crypto_currency = n.crypto_currency
        cards = n.cards

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üíµ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å ({round(cash, 3)} {money_currency})", callback_data="add_cash")],
            [InlineKeyboardButton(text=f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ({round(cards, 3)} {money_currency})", callback_data="add_cards")],
            [InlineKeyboardButton(text=f"üé´ –ö—Ä–∏–ø—Ç–∞ ({round(crypto, 3)} {crypto_currency}) ", callback_data="add_crypto")], 
        ]
    )
    await message.answer("üìà –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –¥–µ–Ω—å–≥–∏", reply_markup=keyboard)







# ADD MONEY CASH --- 1
@dp.callback_query(lambda c: c.data == 'add_cash')
async def process_add_cash(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.add_cash)

# ADD MONEY CASH --- 2
@dp.message(Form.add_cash, F.content_type.in_({'text'}))
async def invoice_add_cash(message: Message, state: FSMContext):
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    await state.set_state(Form.add_cash_text)

# ADD MONEY CASH --- 3
@dp.message(Form.add_cash_text, F.content_type.in_({'text'}))
async def invoice_add_cash_text(message: Message, state: FSMContext):
    id = user_id(message)
    text = message.text
    category = await get_category(text)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')

    flow = "+"
    is_cash = True
    date = await day_utcnow()

        # Saving a shared account User
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    all_cash = data_user.cash + amount
    money_currency = data_user.money_currency
    push_data_user = {
        "cash": round(all_cash, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is True:
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {money_currency}. –≤ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å, –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - '{category}'")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")

        # Save Session
    push_data_session = {
        "ml_category": category,
        "category": text,
        "flow": flow,
        "is_cash": is_cash,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)

    await state.clear()











# ADD MONEY CARD --- 1
@dp.callback_query(lambda c: c.data == 'add_cards')
async def process_add_cards(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.add_cards)

# ADD MONEY CARD --- 2
@dp.message(Form.add_cards, F.content_type.in_({'text'}))
async def invoice_add_cards(message: Message, state: FSMContext):
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    await state.set_state(Form.add_cards_text)

# ADD MONEY CARD --- 3
@dp.message(Form.add_cards_text, F.content_type.in_({'text'}))
async def invoice_add_cards_text(message: Message, state: FSMContext):
    id = user_id(message)
    text = message.text
    category = await get_category(text)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')

    flow = "+"
    is_cards = True
    date = await day_utcnow()

        # Saving a shared account User
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    all_cards = data_user.cards + amount
    money_currency = data_user.money_currency
    push_data_user = {
        "cards": round(all_cards, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is True:
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {money_currency} –Ω–∞ –∫–∞—Ä—Ç—ã, –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - '{category}'")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")

        # Save Session
    push_data_session = {
        "ml_category": category,
        "category": text,
        "flow": flow,
        "is_cards": is_cards,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)

    await state.clear()











# ADD MONEY CRYPTO --- 1
@dp.callback_query(lambda c: c.data == 'add_crypto')
async def process_add_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.add_crypto)

# ADD MONEY CRYPTO --- 2
@dp.message(Form.add_crypto, F.content_type.in_({'text'}))
async def invoice_add_crypto(message: Message, state: FSMContext):
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    await state.set_state(Form.add_crypto_text)

# ADD MONEY CRYPTO --- 3
@dp.message(Form.add_crypto_text, F.content_type.in_({'text'}))
async def invoice_add_crypto_text(message: Message, state: FSMContext):
    id = user_id(message)
    text = message.text
    category = await get_category(text)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')

    flow = "+"
    is_crypto = True
    date = await day_utcnow()

        # Saving a shared account User
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    all_crypto = data_user.crypto + amount
    crypto_currency = data_user.crypto_currency
    push_data_user = {
        "crypto": round(all_crypto, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is True:
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {crypto_currency} –≤ –∫—Ä–∏–ø—Ç—É, –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - '{category}'")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")

        # Save Session
    push_data_session = {
        "ml_category": category,
        "category": text,
        "flow": flow,
        "is_crypto": is_crypto,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)

    await state.clear()








######## DEL MONEY ########

@dp.message(Command("del"))
async def menu_del(message: types.Message):
        # Data preparation
    id = user_id(message)
    n = await get_user_by_id(id)
    if n:
        cash = n.cash
        crypto = n.crypto
        money_currency = n.money_currency
        crypto_currency = n.crypto_currency
        cards = n.cards

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üíµ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å ({round(cash, 3)} {money_currency})", callback_data="del_cash")],
            [InlineKeyboardButton(text=f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ({round(cards, 3)} {money_currency})", callback_data="del_cards")],
            [InlineKeyboardButton(text=f"üé´ –ö—Ä–∏–ø—Ç–∞ ({round(crypto, 3)} {crypto_currency}) ", callback_data="del_crypto")], # ü™™üßæüì∞
        ]
    )
    await message.answer("üìâ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞—Å—Ö–æ–¥–∞", reply_markup=keyboard)









# DEL MONEY CASH --- 1
@dp.callback_query(lambda c: c.data == 'del_cash')
async def process_del_cash(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.del_cash)

# DEL MONEY CASH --- 2
@dp.message(Form.del_cash, F.content_type.in_({'text'}))
async def invoice_del_cash(message: Message, state: FSMContext):
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    await state.set_state(Form.del_cash_text)

# DEL MONEY CASH --- 3
@dp.message(Form.del_cash_text, F.content_type.in_({'text'}))
async def invoice_del_cash_text(message: Message, state: FSMContext):
    id = user_id(message)
    text = message.text
    category = await get_category(text)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')

    flow = "-"
    is_cash = True
    date = await day_utcnow()

        # Saving a shared account User
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    all_cash = data_user.cash - amount
    money_currency = data_user.money_currency
    push_data_user = {
        "cash": round(all_cash, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is True:
        await message.answer(f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ {amount} {money_currency}. –∏–∑ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏, –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ - '{category}'")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")

        # Save Session
    push_data_session = {
        "ml_category": category,
        "category": text,
        "flow": flow,
        "is_cash": is_cash,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)

    await state.clear()









# DEL MONEY CARD --- 1
@dp.callback_query(lambda c: c.data == 'del_cards')
async def process_del_cards(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.del_cards)

# DEL MONEY CARD --- 2
@dp.message(Form.del_cards, F.content_type.in_({'text'}))
async def invoice_del_cards(message: Message, state: FSMContext):
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    await state.set_state(Form.del_cards_text)

# DEL MONEY CARD --- 3
@dp.message(Form.del_cards_text, F.content_type.in_({'text'}))
async def invoice_add_cards_text(message: Message, state: FSMContext):
    id = user_id(message)
    text = message.text
    category = await get_category(text)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')

    flow = "-"
    is_cards = True
    date = await day_utcnow()

        # Saving a shared account User
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    all_cards = data_user.cards - amount
    money_currency = data_user.money_currency
    push_data_user = {
        "cards": round(all_cards, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is True:
        await message.answer(f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ {amount} {money_currency} —Å –∫–∞—Ä—Ç—ã, –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - '{category}'")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")

        # Save Session
    push_data_session = {
        "ml_category": category,
        "category": text,
        "flow": flow,
        "is_cards": is_cards,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)

    await state.clear()











# DEL MONEY CRYPTO --- 1
@dp.callback_query(lambda c: c.data == 'del_crypto')
async def process_del_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω—è—Ç–∏—è —Å –∫—Ä–∏–ø—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.del_crypto)

# DEL MONEY CRYPTO --- 2
@dp.message(Form.del_crypto, F.content_type.in_({'text'}))
async def invoice_del_crypto(message: Message, state: FSMContext):
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    await state.set_state(Form.del_crypto_text)

# DEL MONEY CRYPTO --- 3
@dp.message(Form.del_crypto_text, F.content_type.in_({'text'}))
async def invoice_del_crypto_text(message: Message, state: FSMContext):
    id = user_id(message)
    text = message.text
    category = await get_category(text)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')

    flow = "-"
    is_crypto = True
    date = await day_utcnow()

        # Saving a shared account User
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    all_crypto = data_user.crypto - amount
    crypto_currency = data_user.crypto_currency
    push_data_user = {
        "crypto": round(all_crypto, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is True:
        await message.answer(f"–°–Ω—è—Ç–æ {amount} {crypto_currency} —Å –∫—Ä–∏–ø—Ç—ã, –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - '{category}'")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")

        # Save Session
    push_data_session = {
        "ml_category": category,
        "category": text,
        "flow": flow,
        "is_crypto": is_crypto,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)

    await state.clear()





######### MOVING #############

@dp.message(Command("mov"))
async def menu_mov(message: types.Message):
        # Data preparation
    id = user_id(message)
    n = await get_user_by_id(id)
    if n:
        cash = n.cash
        crypto = n.crypto
        money_currency = n.money_currency
        crypto_currency = n.crypto_currency
        cards = n.cards

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üíµ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å ({round(cash, 3)} {money_currency})", callback_data="mov_cash")],
            [InlineKeyboardButton(text=f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ({round(cards, 3)} {money_currency})", callback_data="mov_cards")],
            [InlineKeyboardButton(text=f"üé´ –ö—Ä–∏–ø—Ç–∞ ({round(crypto, 3)} {crypto_currency}) ", callback_data="mov_crypto")], # ü™™üßæüì∞
        ]
    )
    await message.answer("üìâ –û—Ç–∫—É–¥–∞ –±—É–¥–µ–º –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –¥–µ–Ω—å–≥–∏:", reply_markup=keyboard)




# MOVING MONEY CASH TO CARD OR TO CRYPTO--- 1
@dp.callback_query(lambda c: c.data == 'mov_cash')
async def process_mov_cash(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º—É—é –∏–∑ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.mov_cash)

# MOVING MONEY CASH --- 2
@dp.message(Form.mov_cash)
async def invoice_mov_cash(message: Message, state: FSMContext):
    id = user_id(message)
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
        # –°heck cash
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    cash = data_user.cash
    if cash < amount:
        await message.answer("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ")
        return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ù–∞ –∫–∞—Ä—Ç—É", callback_data="cash_to_card")], 
            [InlineKeyboardButton(text="üé´ –í –∫—Ä–∏–ø—Ç—É", callback_data="cash_to_crypto")],

        ]
    )
    await bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º (RUB):", reply_markup=keyboard)
    await state.set_state(Form.mov_cash_choice)


# MOVING MONEY CASH TO CARD --- 3
@dp.callback_query(Form.mov_cash_choice, lambda c: c.data == 'cash_to_card')
async def process_mov_cash_to_card(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.from_user.id
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')
    data_user = await get_user_by_id(id)
    new_cash = data_user.cash - amount
    new_cards = data_user.cards + amount
    push_data_user = {
        "cash": round(new_cash, 3),
        "cards": round(new_cards, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is False:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")
        # Save cash
    flow = "-"
    is_cash = True
    date = await day_utcnow()
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cash": is_cash,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Save card
    flow = "+"
    is_cards = True
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cards": is_cards,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Message
    await bot.send_message(callback_query.from_user.id, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await bot.answer_callback_query(callback_query.id)
    await state.clear()


# MOVING MONEY CASH TO CRYPTO --- 3
@dp.callback_query(Form.mov_cash_choice, lambda c: c.data == 'cash_to_crypto')
async def process_mov_cash_to_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.from_user.id
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')
    data_user = await get_user_by_id(id)

    one_usd = await get_exchange()
    if one_usd is None:
        one_usd = 100
        logging.error(f"Failed get exchange")
    new_cash = data_user.cash - amount
    new_crypto = data_user.crypto + amount / one_usd
    push_data_user = {
        "cash": round(new_cash, 3),
        "crypto": round(new_crypto, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is False:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")
        # Save cash
    flow = "-"
    is_cash = True
    date = await day_utcnow()
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cash": is_cash,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Save card
    flow = "+"
    is_crypto = True
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_crypto": is_crypto,
        "amount": round(amount / one_usd, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Message
    await bot.send_message(callback_query.from_user.id, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å–∏–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤ P2P. –ß—Ç–æ —É—á—Ç–µ—Ç—Å—è –≤–≤–∏–¥–µ —Ä–∞—Å—Ö–æ–¥–∞.")
    await bot.answer_callback_query(callback_query.id)
    await state.clear()












# MOVING MONEY CARD TO CASH OR TO CRYPTO--- 1
@dp.callback_query(lambda c: c.data == 'mov_cards')
async def process_mov_card(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º—É—é —Å –∫–∞—Ä—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.mov_card)

# MOVING MONEY CARD --- 2
@dp.message(Form.mov_card)
async def invoice_mov_card(message: Message, state: FSMContext):
    id = user_id(message)
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
        # –°heck cash
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    cards = data_user.cards
    if cards < amount:
        await message.answer("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞—Ä—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ")
        return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –í –Ω–∞–ª–∏—á–∫—É", callback_data="card_to_cash")], 
            [InlineKeyboardButton(text="üé´ –í –∫—Ä–∏–ø—Ç—É", callback_data="card_to_crypto")],

        ]
    )
    await bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º (RUB):", reply_markup=keyboard)
    await state.set_state(Form.mov_card_choice)


# MOVING MONEY CASH TO CARD --- 3
@dp.callback_query(Form.mov_card_choice, lambda c: c.data == 'card_to_cash')
async def process_mov_card_to_cash(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.from_user.id
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')
    data_user = await get_user_by_id(id)
    new_cards = data_user.cards - amount
    new_cash = data_user.cash + amount
    push_data_user = {
        "cash": round(new_cash, 3),
        "cards": round(new_cards, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is False:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")
        # Save cash
    flow = "-"
    is_cards = True
    date = await day_utcnow()
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cards": is_cards,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Save card
    flow = "+"
    is_cash = True
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cash": is_cash,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Message
    await bot.send_message(callback_query.from_user.id, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await bot.answer_callback_query(callback_query.id)
    await state.clear()


# MOVING MONEY CASH TO CRYPTO --- 3
@dp.callback_query(Form.mov_card_choice, lambda c: c.data == 'card_to_crypto')
async def process_mov_card_to_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.from_user.id
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')
    data_user = await get_user_by_id(id)

    one_usd = await get_exchange()
    if one_usd is None:
        one_usd = 100
        logging.error(f"Failed get exchange")
    new_cards = data_user.cards - amount
    new_crypto = data_user.crypto + amount / one_usd
    push_data_user = {
        "cards": round(new_cards, 3),
        "crypto": round(new_crypto, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is False:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")
        # Save cash
    flow = "-"
    is_cards = True
    date = await day_utcnow()
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cards": is_cards,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Save card
    flow = "+"
    is_crypto = True
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_crypto": is_crypto,
        "amount": round(amount / one_usd, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Message
    await bot.send_message(callback_query.from_user.id, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å–∏–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤ P2P. –ß—Ç–æ —É—á—Ç–µ—Ç—Å—è –≤–≤–∏–¥–µ —Ä–∞—Å—Ö–æ–¥–∞.")
    await bot.answer_callback_query(callback_query.id)
    await state.clear()















# MOVING MONEY CRYPTO TO CASH OR TO CARDS--- 1
@dp.callback_query(lambda c: c.data == 'mov_crypto')
async def process_mov_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º—É—é —Å –∫—Ä–∏–ø—Ç—ã:")
    await bot.answer_callback_query(callback_query.id)
    await state.set_state(Form.mov_crypto)

# MOVING MONEY CACRYPTORD --- 2
@dp.message(Form.mov_crypto)
async def invoice_mov_crypto(message: Message, state: FSMContext):
    id = user_id(message)
        # Data preparation
    amount = await is_int_or_float(message.text)
        # –°heck in
    if amount is None:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏")
        return
        # –°heck cash
    data_user = await get_user_by_id(id)
    if data_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    crypto = data_user.crypto
    if crypto < amount:
        await message.answer("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∏–ø—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ")
        return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º  –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(amount=amount)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –í –Ω–∞–ª–∏—á–∫—É", callback_data="crypto_to_cash")], 
            [InlineKeyboardButton(text="üí≥ –ù–∞ –∫—É—Ä—Ç—É", callback_data="crypto_to_cards")],

        ]
    )
    await bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º (USD):", reply_markup=keyboard)
    await state.set_state(Form.mov_crypto_choice)


# MOVING MONEY CRYPTO TO CASH --- 3
@dp.callback_query(Form.mov_crypto_choice, lambda c: c.data == 'crypto_to_cash')
async def process_mov_crypto_to_cash(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.from_user.id
    one_usd = await get_exchange()
    if one_usd is None:
        one_usd = 100
        logging.error(f"Failed get exchange")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')
    data_user = await get_user_by_id(id)
    new_crypto = data_user.crypto - amount
    new_cash = data_user.cash + amount * one_usd
    push_data_user = {
        "cash": round(new_cash, 3),
        "crypto": round(new_crypto, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is False:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")
        # Save cash
    flow = "-"
    is_crypto = True
    date = await day_utcnow()
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_crypto": is_crypto,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Save card
    flow = "+"
    is_cash = True
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cash": is_cash,
        "amount": round(amount * one_usd, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Message
    await bot.send_message(callback_query.from_user.id, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await bot.answer_callback_query(callback_query.id)
    await state.clear()


# MOVING MONEY CRYPTO TO CARDS --- 3
@dp.callback_query(Form.mov_crypto_choice, lambda c: c.data == 'crypto_to_cards')
async def process_mov_card_to_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.from_user.id
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    amount = data.get('amount')
    data_user = await get_user_by_id(id)

    one_usd = await get_exchange()
    if one_usd is None:
        one_usd = 100
        logging.error(f"Failed get exchange")
    new_crypto = data_user.crypto - amount
    new_cards = data_user.cards + amount * one_usd
    push_data_user = {
        "crypto": round(new_crypto, 3),
        "cards": round(new_cards, 3),
    }
    confirm_user = await update_user(id, push_data_user)
    if confirm_user is False:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.")
        # Save cash
    flow = "-"
    is_crypto = True
    date = await day_utcnow()
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_crypto": is_crypto,
        "amount": round(amount, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Save card
    flow = "+"
    is_cards = True
        # Save Session
    push_data_session = {
        "category": "moving",
        "flow": flow,
        "is_cards": is_cards,
        "amount": round(amount * one_usd, 3),
        "users_id": id,
        "date": date
    }
    await adding_session(push_data_session)
        # Message
    await bot.send_message(callback_query.from_user.id, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å–∏–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤ P2P. –ß—Ç–æ —É—á—Ç–µ—Ç—Å—è –≤–≤–∏–¥–µ —Ä–∞—Å—Ö–æ–¥–∞.")
    await bot.answer_callback_query(callback_query.id)
    await state.clear()

























######## Statistic ########
@dp.message(Command("stat"))
async def menu_stat(message: types.Message):
    #id = user_id(message)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –§–∏–Ω. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫. –º–µ—Å—è—Ü", callback_data="stat_month")],
            [InlineKeyboardButton(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫. –º–µ—Å—è—Ü", callback_data="stat_cat_month")],
            [InlineKeyboardButton(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫. –º–µ—Å—è—Ü", callback_data="stat_add_cat_month")],
            [InlineKeyboardButton(text="üìä –§–∏–Ω. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫. –≥–æ–¥", callback_data="stat_year")],
            [InlineKeyboardButton(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥ –∑–∞ —Ç–µ–∫. –≥–æ–¥", callback_data="stat_add_year")],
            [InlineKeyboardButton(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥ –∑–∞ —Ç–µ–∫. –≥–æ–¥", callback_data="stat_del_year")],
        ]
    )
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)





# –§–∏–Ω. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–Ω—è–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–æ—Ö–æ–¥
@dp.callback_query(lambda c: c.data == 'stat_month')
async def process_stat_month(callback_query: types.CallbackQuery):
    await bot.send_chat_action(callback_query.from_user.id, action='typing')

    id = callback_query.from_user.id
    data = await get_session_by_month(id)

    if data is None:
        await bot.send_message(callback_query.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        await bot.answer_callback_query(callback_query.id)
        return
    # –°–æ–±–∏—Ä–∞—é –¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏ –≤—ã–≤–æ–∂—É –≤ –æ–±–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    x = []
    y = []
    income = expenses = null_day = null_amount = i = 0

    for n in data:
        i += 1
        day = int(await re_day(n.date))  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ int
            # USDT 
        if i == 1:
            one_usdt = await get_exchange()
        if n.is_crypto is True:
            amount = float(n.amount) * one_usdt
        else:
            amount = float(n.amount)

        if n.flow == '-':  # n.flow –º–æ–∂–µ—Ç –±—ã—Ç—å '+' –∏–ª–∏ '-'
            amount = -amount
            expenses = expenses + amount
        elif n.flow == '+':
            income = income + amount

        if null_day == 0:
            null_day = day
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ 
            name_month = await re_month(n.date)

        if day == null_day:
            null_amount += amount
        else:
            x.append(null_day)
            y.append(round(null_amount, 2))
            null_day = day
            null_amount = amount

        if i == len(data):
            x.append(day)
            y.append(round(null_amount, 2))

    name_file = f"graph_{id}.png"
    confirm = await build_graph(id, x, y, name_month, name_file) # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

    if confirm is True and os.path.exists(f"./graph/{name_file}") and os.path.getsize(f"./graph/{name_file}") > 0:
        await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile(f"./graph/{name_file}"))

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–∞, —Ç—É—Ç –∂–µ —É–¥–∞–ª—è—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    directory_path = "./graph/"
    file_name_to_delete = name_file

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ
    for filename in os.listdir(directory_path):
        if filename == file_name_to_delete:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            file_path = os.path.join(directory_path, filename)
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            print(f"INFO: –§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    else:
        print(f"ERROR: –§–∞–π–ª {file_name_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {directory_path}")

    await bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {name_month}:\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: {round(income, 2)}\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {round(expenses, 2)}\n–û—Å—Ç–∞—Ç–æ–∫: {round(income - (expenses * -1), 2)}")
    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è





# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü —Ç–µ–∫—É—â–∏–π –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == 'stat_cat_month')
async def process_stat_cat_month(callback_query: types.CallbackQuery):
    await bot.send_chat_action(callback_query.from_user.id, action='typing')

    id = callback_query.from_user.id
    data = await get_session_by_month(id)

    if data is None:
        await bot.send_message(callback_query.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        await bot.answer_callback_query(callback_query.id)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–æ–ª—å
    flow = "-"
    data_q = await sum_cat(flow, data)
    x = data_q[0]
    y = data_q[1]
    name_month = data_q[2]
    name_file = f"graph_{id}_hor.png"
    add_or_del = "—Ä–∞—Å—Ö–æ–¥–æ–≤"

    confirm = await build_graph_hor(x, y, add_or_del, name_month, name_file) # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

    if confirm is True and os.path.exists(f"./graph/{name_file}") and os.path.getsize(f"./graph/{name_file}") > 0:
        await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile(f"./graph/{name_file}"))

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–∞, —Ç—É—Ç –∂–µ —É–¥–∞–ª—è—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    directory_path = "./graph/"
    file_name_to_delete = name_file

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ
    for filename in os.listdir(directory_path):
        if filename == file_name_to_delete:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            file_path = os.path.join(directory_path, filename)
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            print(f"INFO: –§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    else:
        print(f"ERROR: –§–∞–π–ª {file_name_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {directory_path}")

    #await bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {name_month}:\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: {round(income, 2)}\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {round(expenses, 2)}\n–û—Å—Ç–∞—Ç–æ–∫: {round(income - (expenses * -1), 2)}")
    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è





# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü —Ç–µ–∫—É—â–∏–π –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == 'stat_add_cat_month')
async def process_stat_add_cat_month(callback_query: types.CallbackQuery):
    await bot.send_chat_action(callback_query.from_user.id, action='typing')

    id = callback_query.from_user.id
    data = await get_session_by_month(id)

    if data is None:
        await bot.send_message(callback_query.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        await bot.answer_callback_query(callback_query.id)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–æ–ª—å
    flow = "+"
    data_q = await sum_cat(flow, data)
    x = data_q[0]
    y = data_q[1]
    name_month = data_q[2]
    name_file = f"graph_{id}_add_hor.png"
    add_or_del = "–¥–æ—Ö–æ–¥–æ–≤"

    confirm = await build_graph_hor(x, y, add_or_del, name_month, name_file) # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

    if confirm is True and os.path.exists(f"./graph/{name_file}") and os.path.getsize(f"./graph/{name_file}") > 0:
        await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile(f"./graph/{name_file}"))

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–∞, —Ç—É—Ç –∂–µ —É–¥–∞–ª—è—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    directory_path = "./graph/"
    file_name_to_delete = name_file

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ
    for filename in os.listdir(directory_path):
        if filename == file_name_to_delete:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            file_path = os.path.join(directory_path, filename)
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            print(f"INFO: –§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    else:
        print(f"ERROR: –§–∞–π–ª {file_name_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {directory_path}")

    #await bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {name_month}:\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: {round(income, 2)}\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {round(expenses, 2)}\n–û—Å—Ç–∞—Ç–æ–∫: {round(income - (expenses * -1), 2)}")
    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è





# –§–∏–Ω. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–µ—Å—è—Ü–∞–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –¥–æ—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥
@dp.callback_query(lambda c: c.data == 'stat_year')
async def process_stat_year(callback_query: types.CallbackQuery):
    await bot.send_chat_action(callback_query.from_user.id, action='typing')

    id = callback_query.from_user.id
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    data = await get_session_stat_year(id)

    if data is None:
        await bot.send_message(callback_query.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –≥–æ–¥—É –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        await bot.answer_callback_query(callback_query.id)
        return
        # –°–æ–±–∏—Ä–∞—é –¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≤—ã–≤–æ–∂—É –≤ –æ–±–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    x = []
    y = []
    income = expenses = amount = null_amount = i = 0
    null_month = ""

    for n in data:
        i += 1
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–∞–Ω—ã—Ö –±–∞–∑—ã
        name_month = await re_month(n.date)
            # USDT
        if i == 1:
            one_usdt = await get_exchange()
        if n.is_crypto is True:
            amount = float(n.amount) * one_usdt
        else:
            amount = float(n.amount)

        if n.flow == '-':  # n.flow –º–æ–∂–µ—Ç –±—ã—Ç—å '+' –∏–ª–∏ '-'
            amount = -amount
            expenses = expenses + amount
        elif n.flow == '+':
            income = income + amount

        if null_month == "":
            null_month = name_month
            year = await re_year(n.date) # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥

        if name_month == null_month:
            null_amount += amount
        else:
            x.append(null_month)
            y.append(round(null_amount, 2))
            null_month = name_month
            null_amount = amount

        if i == len(data):
            x.append(name_month)
            y.append(round(null_amount, 2))

    name_file = f"graph_{id}_stat_year.png"
    confirm = await build_graph(id, x, y, year, name_file) # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

    if confirm is True and os.path.exists(f"./graph/{name_file}") and os.path.getsize(f"./graph/{name_file}") > 0:
        await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile(f"./graph/{name_file}"))

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–∞, —Ç—É—Ç –∂–µ —É–¥–∞–ª—è—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    directory_path = "./graph/"
    file_name_to_delete = name_file

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ
    for filename in os.listdir(directory_path):
        if filename == file_name_to_delete:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            file_path = os.path.join(directory_path, filename)
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            print(f"INFO: –§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    else:
        print(f"ERROR: –§–∞–π–ª {file_name_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {directory_path}")

    await bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {year}:\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≥–æ–¥: {round(income, 2)}\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∑–∞ –≥–æ–¥: {round(expenses, 2)}\n–û—Å—Ç–∞—Ç–æ–∫: {round(income - (expenses * -1), 2)}")
    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è







# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥ —Ç–µ–∫—É—â–∏–π –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == 'stat_add_year')
async def process_stat_add_year(callback_query: types.CallbackQuery):
    await bot.send_chat_action(callback_query.from_user.id, action='typing')

    id = callback_query.from_user.id
    data = await get_session_stat_year(id)

    if data is None:
        await bot.send_message(callback_query.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –≥–æ–¥—É –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        await bot.answer_callback_query(callback_query.id)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–æ–ª—å
    flow = "+"
    data_q = await sum_cat(flow, data)
    x = data_q[0]
    y = data_q[1]
    name_year = data_q[3]
    name_file = f"graph_{id}_add_hor_year.png"
    add_or_del = "–¥–æ—Ö–æ–¥–æ–≤"

    confirm = await build_graph_hor(x, y, add_or_del, name_year, name_file) # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

    if confirm is True and os.path.exists(f"./graph/{name_file}") and os.path.getsize(f"./graph/{name_file}") > 0:
        await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile(f"./graph/{name_file}"))

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–∞, —Ç—É—Ç –∂–µ —É–¥–∞–ª—è—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    directory_path = "./graph/"
    file_name_to_delete = name_file

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ
    for filename in os.listdir(directory_path):
        if filename == file_name_to_delete:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            file_path = os.path.join(directory_path, filename)
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            print(f"INFO: –§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    else:
        print(f"ERROR: –§–∞–π–ª {file_name_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {directory_path}")

    #await bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {name_month}:\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: {round(income, 2)}\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {round(expenses, 2)}\n–û—Å—Ç–∞—Ç–æ–∫: {round(income - (expenses * -1), 2)}")
    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è






# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥ —Ç–µ–∫—É—â–∏–π –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == 'stat_del_year')
async def process_stat_del_year(callback_query: types.CallbackQuery):
    await bot.send_chat_action(callback_query.from_user.id, action='typing')

    id = callback_query.from_user.id
    data = await get_session_stat_year(id)

    if data is None:
        await bot.send_message(callback_query.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –≥–æ–¥—É –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        await bot.answer_callback_query(callback_query.id)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–æ–ª—å
    flow = "-"
    data_q = await sum_cat(flow, data)
    x = data_q[0]
    y = data_q[1]
    name_year = data_q[3]
    name_file = f"graph_{id}_del_hor_year.png"
    add_or_del = "—Ä–∞—Å—Ö–æ–¥–æ–≤"

    confirm = await build_graph_hor(x, y, add_or_del, name_year, name_file) # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞

    if confirm is True and os.path.exists(f"./graph/{name_file}") and os.path.getsize(f"./graph/{name_file}") > 0:
        await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile(f"./graph/{name_file}"))

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–∞, —Ç—É—Ç –∂–µ —É–¥–∞–ª—è—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    directory_path = "./graph/"
    file_name_to_delete = name_file

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ
    for filename in os.listdir(directory_path):
        if filename == file_name_to_delete:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            file_path = os.path.join(directory_path, filename)
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
            print(f"INFO: –§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    else:
        print(f"ERROR: –§–∞–π–ª {file_name_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {directory_path}")

    #await bot.send_message(callback_query.from_user.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {name_month}:\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: {round(income, 2)}\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {round(expenses, 2)}\n–û—Å—Ç–∞—Ç–æ–∫: {round(income - (expenses * -1), 2)}")
    
    await bot.answer_callback_query(callback_query.id)
    await callback_query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è




















######## SETINGS ########
@dp.message(Command("set"))
async def menu_setings(message: types.Message):
    #id = user_id(message)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            # [InlineKeyboardButton(text="–í–∞–ª—é—Ç–∞", callback_data="currency")],
            # [InlineKeyboardButton(text="–Ø–∑—ã–∫ –±–æ—Ç–∞", callback_data="lang")],
            [InlineKeyboardButton(text="–û–±–Ω—É–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="zero")],
            # [InlineKeyboardButton(text="Backup", callback_data="backup")],
        ]
    )
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)

# SET --- currency
@dp.callback_query(lambda c: c.data == 'currency')
async def process_currency(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "currency")
    await bot.answer_callback_query(callback_query.id)

# SET --- lang
@dp.callback_query(lambda c: c.data == 'lang')
async def process_lang(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "lang")
    await bot.answer_callback_query(callback_query.id)



#                                                                           #
############################# SUB-MENU ######################################




######## ADMIN ########
@dp.message(Command("admin"))
async def menu_admin(message: types.Message):
    id = user_id(message)
    if int(is_admin) != id:
        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Download Statistic", callback_data="user_stat")],
            [InlineKeyboardButton(text="Download log", callback_data="log")],
            [InlineKeyboardButton(text="Download Backup", callback_data="backup")],
            [InlineKeyboardButton(text="*Upload and Restore DB", callback_data="push_db")],
            [InlineKeyboardButton(text="–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="donate")],
        ]
    )
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞:", reply_markup=keyboard)

# ADMIN --- user_stat
@dp.callback_query(lambda c: c.data == 'user_stat')
async def process_user_stat(callback_query: types.CallbackQuery):
    # id = user_id(callback_query)
    chat_id = callback_query.message.chat.id
    # message_id = callback_query.message.message_id
    data = await get_all_users_admin()

    all_static = []
    number = 0
    all_static.append(["‚Ññ", "id", "–ò–º—è", "–ü–æ–ª–Ω–æ–µ –∏–º—è", "–ü–µ—Ä–≤–æ–µ –∏–º—è", "–í—Ç–æ—Ä–æ–µ –∏–º—è", "–î–æ–Ω–∞—Ç–∏–ª", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"])
    
    for user in data:
        number += 1
        id = user.id
        name = user.name
        full_name = user.full_name
        first_name = user.first_name
        last_name = user.last_name
        did_you_donate = user.did_you_donate
        date = user.date

        all_static.append([number, id, name, full_name, first_name, last_name, did_you_donate, date]) # added user data

    # Create csv file
    output = StringIO()
    writer = csv.writer(output)
    for row in all_static:
        writer.writerow(row)
    csv_data = output.getvalue()
    output.close()

    # csv file to download
    file_name = f"Admin-statistic.csv"
    buffered_input_file = types.input_file.BufferedInputFile(file=csv_data.encode(), filename=file_name)
    try:
        await bot.send_document(chat_id=chat_id, document=buffered_input_file)
        await bot.answer_callback_query(callback_query.id)
    except:
        print(f"Error sending documentb Admin stat")

# ADMIN --- log
@dp.callback_query(lambda c: c.data == 'log')
async def process_user_log(callback_query: types.CallbackQuery):
    if os.path.exists("./log/app.log") and os.path.getsize("./log/app.log") > 0:
        await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile("./log/app.log"))
        await bot.answer_callback_query(callback_query.id)
    else:
        await bot.send_message(callback_query.from_user.id, "–§–∞–π–ª app.log –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç.")
        await bot.answer_callback_query(callback_query.id)

# ADMIN --- backup 
@dp.callback_query(lambda c: c.data == 'backup')
async def process_backup(callback_query: types.CallbackQuery):
    confirmation = await backup_db()
    if confirmation is True:
        await bot.send_message(callback_query.from_user.id, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞ –Ω–∏–∂–µ. –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    await asyncio.sleep(0.5)

    data_folder = Path("./backup_db/")

    files = [entry for entry in data_folder.iterdir() if entry.is_file()] # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    sorted_files = sorted(files, key=lambda x: x.stat().st_mtime, reverse=True) # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)

    for file_to_delete in sorted_files[3:]: # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ñ–∞–π–ª–∞, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        os.remove(file_to_delete)
    logging.info("Remove all file DB, saved 3 latest files.")

    last_downloaded_file = sorted_files[0] if sorted_files else None   # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ (–Ω–æ–≤–µ–π—à–∏–º) (–∞–¥—Ä–µ—Å)
    logging.info("Download last DB file.")

    await bot.send_document(chat_id=callback_query.from_user.id, document=types.input_file.FSInputFile(last_downloaded_file))
    await bot.answer_callback_query(callback_query.id)




#
# Admin Restore DB
#
# –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é —Å–≤–æ–π —Ñ–∞–π–ª db –±–∏–Ω–∞—Ä–Ω—ã–π –≤ .sql, –æ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –ø–∞–ø–∫—É download_db.
# –î–∞–ª–µ–µ —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å, –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç  
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–∞–∑–æ–π. –¢–µ–º –≤—Ä–µ–º–µ–Ω–µ–º, –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –¥–∞–∂–µ —Ä–∞–∑–º–µ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–π –±–∞–∑—ã 
# –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –∑–∞–∫–∞—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –û–Ω –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–∞–ø–∫–∏, –Ω–µ –¥—É–º–∞—é —á—Ç–æ –∏—Ö –±—É–¥–µ—Ç –º–Ω–æ–≥–æ.
#
 
class Restor_db(StatesGroup):
    load_db = State()


# Push button - restore
@dp.callback_query(lambda c: c.data == 'push_db')
async def process_sub_admin_stat_push(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(text="–ü—Ä–∏–∫—Ä–µ–ø–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω—É–∂–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Restor_db.load_db) # Next Step
    await bot.answer_callback_query(callback_query.id) # End typing

# Next step - download db and restore
@dp.message(Restor_db.load_db)
async def load_a_base(message: Message, state: FSMContext):
    # global work_in_progress
    # work_in_progress = True # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if not isinstance(message.document, types.Document):
        await message.answer("–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    file_extension = message.document.file_name.split('.')[-1]
    allowed_extensions = ['sql']

    if file_extension not in allowed_extensions:
        await message.answer("–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Ñ–∞–π–ª –Ω–µ sql —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.")
        return    


    # Name file
    date_time = await day_utcnow() # Current date and time
    date = await unformat_date(date_time)
    formtime = str(date[0]) + str(date[1])
    file_name = f"uploaded-db-{formtime}.sql"

    # await asyncio.sleep(0.3)

    file_path = f"./download_db/{file_name}"
    await bot.download(message.document, file_path) # –¢–æ —á—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –ø–∞–ø–∫—É —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º

    await bot.session.close()
    await dp.storage.close()

    confirmation = await restore_db(file_path) # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–µ–ª–Ω–∏–µ –±–∞–∑—ã

    work_in_progress = False # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –±–∞–∑–µ

    if confirmation == True:
        await message.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")
    else:
        await message.answer("–ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")


    await state.clear()
    #await state.set_state(Restor_db.restor_db) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É









@dp.message()
async def my_handler(message: Message):
    await typing(message)
    #await asyncio.sleep(2)
    if "–±–∞–ª–∞–Ω—Å" in message.text.lower():
            # Data preparation
        id = user_id(message)
        n = await get_user_by_id(id)
        if n:
            cash = n.cash
            crypto = n.crypto
            money_currency = n.money_currency
            crypto_currency = n.crypto_currency
            cards = n.cards

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üíµ –ù–∞–ª–∏—á–Ω–æ—Å—Ç—å ({round(cash, 3)} {money_currency})", callback_data="add_cash")],
                [InlineKeyboardButton(text=f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ({round(cards, 3)} {money_currency})", callback_data="add_cards")],
                [InlineKeyboardButton(text=f"üé´ –ö—Ä–∏–ø—Ç–∞ ({round(crypto, 3)} {crypto_currency}) ", callback_data="add_crypto")], 
            ]
        )
        await message.answer("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å:", reply_markup=keyboard)
            # USDT
        one_usdt = await get_exchange()
        usdt_crypto = crypto * one_usdt
        await bot.send_message(message.from_user.id, f"–í—Å–µ–≥–æ –Ω–∞–ª–æ–º –∏ –Ω–∞ —Å—á–µ—Ç–∞—Ö: {round(usdt_crypto + cards + cash, 2)} {money_currency}")

    elif "—Å—Ç–∞—Ç–∏—Å—Ç" in message.text.lower() or "–≥—Ä–∞—Ñ" in message.text.lower():
        await menu_stat(message)

    elif "–¥–æ–±–∞–≤" in message.text.lower():
        await menu_add(message)

    elif "—É–¥–∞–ª" in message.text.lower() or "—É–±—Ä–∞—Ç—å" in message.text.lower() or "—Ä–∞—Å—Ö–æ–¥" in message.text.lower():
        await menu_del(message)

    elif "–ø–µ—Ä–µ–º–µ" in message.text.lower() or "–ø–µ—Ä–µ–∫–∏–Ω" in message.text.lower():
        await menu_mov(message)

    elif "–Ω–∞—Å—Ç—Ä–æ" in message.text.lower() or "—É—Å—Ç–∞–Ω–æ–≤" in message.text.lower():
        await menu_setings(message)

    elif "–∞–¥–º–∏" in message.text.lower():
        await menu_admin(message)

    else:
        await message.answer("–Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–µ–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. ")









if __name__ == "__main__":
    # logging.basicConfig(level=logging.INFO, stream=sys.stdout) # –ü—Ä–∏ –¥–µ–ø–ª–æ–µ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ç—å
    asyncio.run(dp.start_polling(bot, skip_updates=False)) # skip_updates=False –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram, –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–ª–∞—Ç–µ–∂–µ–π






























# async def main() -> None:
#     # Initialize Bot instance with default bot properties which will be passed to all API calls
#     bot = Bot(token=telegram, default=DefaultBotProperties(parse_mode=ParseMode.HTML)) # Markdown  HTML
#     # And the run events dispatching
#     await dp.start_polling(bot)


# if __name__ == "__main__":
#     logging.basicConfig(level=logging.INFO, stream=sys.stdout)
#     asyncio.run(main())